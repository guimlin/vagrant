- name: ping all the servers
  hosts:
    - all
  #become: true
  #become_user: vagrant
  tasks:
    - action: ping

- name: install kubeadm
  hosts: 
    - all
  become: true
  tasks:

  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      #- software-properties-common
      - lsb-release

  # - name: To get arch
  #   command: dpkg --print-architecture
  #   register: arch
  # - name: To get lsb_release
  #   command: lsb_release -cs
  #   register: lsb_release

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present


  - name: Add apt repository for stable version
    apt_repository:
      #repo: "deb [arch={{ arch }} signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ lsb_release }} stable"
      repo: deb https://download.docker.com/linux/ubuntu/ {{ansible_distribution_release}} stable
      state: present


 # echo \ }} 
 #  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
 #  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce 
      - docker-ce-cli 
      - containerd.io
    notify:
      - docker status

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl

#   - name: Remove swapfile from /etc/fstab
#     mount:
#       name: "{{ item }}"
#       fstype: swap
#       state: absent
#     with_items:
#       - swap
#       - none

#   - name: Disable swap
#     command: swapoff -a
#     when: ansible_swaptotal_mb > 0



#   - name: Configure node ip
#     lineinfile:
#       path: /etc/default/kubelet
#       line: KUBELET_EXTRA_ARGS=--node-ip=192.168.50.230
#   - name: Restart kubelet
#     service:
#       name: kubelet
#       daemon_reload: yes
#       state: restarted

  
#   - name: Initialize the Kubernetes cluster using kubeadm
#     command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans="192.168.50.10"  --node-name k8s-master --pod-network-cidr=192.168.0.0/16


#   - name: Setup kubeconfig for vagrant user
#     command: "{{ item }}"
#     with_items:
#      - mkdir -p /home/vagrant/.kube
#      - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
#      - chown vagrant:vagrant /home/vagrant/.kube/config

#   - name: Install calico pod network
#     become: false
#     command: kubectl create -f https://docs.projectcalico.org/v3.4/getting-started/kubernetes/installation/hosted/calico.yaml

#   - name: Generate join command
#     command: kubeadm token create --print-join-command
#     register: join_command

#   - name: Copy join command to local file
#     local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

  handlers:
    - name: docker status
      service: name=docker state=started


- name: create cluster
  hosts: 
    - masters
  #become: true
  tasks:
    - name: Create Cluster shell
      shell: |
        sudo kubeadm init --apiserver-advertise-address=192.168.50.230 --pod-network-cidr=192.168.0.0/16
        sudo mkdir -p /home/vagrant/.kube
        sudo cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
        sudo chown $(id -u vagrant):$(id -g vagrant) /home/vagrant/.kube/config

        kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      register: command_output

    - debug: var=command_output.stdout

- name: join nodes
  hosts:
    - nodes
  takks:
    - name: join nodes shell
      shell: |
        kubeadm join --token <token> <control-plane-host>:<control-plane-port> --discovery-token-ca-cert-hash sha256:<hash>
      vars:
        token:
          # kubeadm token list
          # kubeadm token create
          # openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
        hash:
        control-plane-host: 192.168.50.230
        control-plane-port: 6443



